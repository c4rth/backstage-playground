apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template
  title: Example Template 1
  description: An example template for the scaffolder
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
        # - repoUrl
        - mode
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        # repoUrl:
        #   title: Repository Location
        #   type: string
        #   ui:field: RepoUrlPicker
        #   ui:options:
        #     allowedHosts:
        #       - github.com
        mode:
          title: Creation mode
          type: string
          default: repo
          enum:
            - repo
            - pr
          enumNames:
            - 'Create new repo'
            - 'Create PR'

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    # - id: fetch-base
    #   name: Fetch Base
    #   action: fetch:template
    #   input:
    #     url: ./content
    #     values:
    #       name: ${{ parameters.name }}
    
    - action: debug:log
      id: write-workspace-directory
      name: List the workspace directory
      input:
        listWorkspace: true

#    - action: debug:wait
#      id: wait-1min
#      name: Waiting for 1 minutes
#      input:
#        minutes: 1

    - action: debug:log
      id: message
      name: Message
      input:
        message: ${{ parameters.put('realOwner', parameters.owner.split('/')[1].split('.')[0]) }}


    - action: debug:log
      id: message
      name: Message
      input:
        message: ${{ parameters.realOwner }}

    - action: debug:log
      id: debugCreateRepo
      name: Create Repo
      if: ${{ parameters.mode == 'repo' }}
      input:
        message: Create new repo

    - action: debug:log
      id: debugCreatePR
      name: Create PR
      if: ${{ parameters.mode == 'pr' }}
      input:
        message: Create PR


    # This step publishes the contents of the working directory to GitHub.
    # - id: publish
    #   name: Publish
    #   if: ${{ parameters.createRepo }}
    #   action: publish:github
    #   input:
    #     allowedHosts: ['github.com']
    #     description: This is ${{ parameters.name }}
    #     repoUrl: ${{ parameters.repoUrl }}
        

    # The final step is to register our new component in the catalog.
#    - id: register
#      name: Register
#      action: catalog:register
#     input:
#        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
#        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
#  output:
#    links:
#      - title: Repository
#        url: ${{ steps['publish'].output.remoteUrl }}
#      - title: Open in catalog
#        icon: catalog
#        entityRef: ${{ steps['register'].output.entityRef }}
