app:
  title: Carth Backstage App
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/backstage/backstage/issues # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Mail
        icon: email
        links:
          - url: mailto:me@carth.xyz
            title: Email me
      - title: Teams Chatroom
        icon: chat
        links:
          - url: https://discord.gg/backstage-687207715902193673
            title: '#backstage'

organization:
  name: Acme

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   dangerouslyDisableDefaultAuthPolicy: true
  auth:
    dangerouslyDisableDefaultAuthPolicy: true
    externalAccess:
      - type: static
        options:
          #token: 'mpZ7Aq0y3bWAz+4BQqXKnNUmcNunl16L'
          token: 'my-access-token'
          subject: cicd-system-completion-events
        accessRestrictions:
          - plugin: api-platform

  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment for docker compose
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", "http:", "https:"]
    img-src: ["'self'", "http:", "https:", "data:", "blob:"]
    script-src: ["'self'", "http:", "https:", "data:", "blob:", "'unsafe-eval'"]
    upgrade-insecure-requests: []
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false

  cors:
    # dockercompose
    #origin: http://localhost:3000
    origin: http://localhost:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE, OPTIONS, CONNECT, TRACE]
    credentials: true
    Access-Control-Allow-Origin: '*'
    
  database:
    client: pg
    connection:
      # Uncomment for docker compose
      host: postgres-db
      #host: 127.0.0.1
      port: 5432
      user: postgres
      password: postgres
    # client: better-sqlite3
    # connection: ":memory:"
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  reading:
    allow:
      - host: raw.githubusercontent.com
      - host: github.com

permission:
  enabled: true
  # rbac:
  #   pluginsWithPermission:
  #     - catalog
  #     - policy
  #     - scaffolder
  #     - search  # ?
  #     - permission # ?
  #     - qeta

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  azure:
    - host: dev.azure.com
      credentials:
        - personalAccessToken: ${ADO_PERSONAL_ACCESS_TOKEN}

azureDevOps:
  host: dev.azure.com
  organization: thierrycarels0265

proxy:
  skipInvalidProxies: true
  endpoints:
    # customize developer hub instance
    '/developer-hub':
      target: '/'
      changeOrigin: true
      # Change to "false" in case of using self hosted cluster with a self-signed certificate
      secure: false


# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "local" # Alternatives - 'local'
  publisher:
    type: "local" # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    local:
      publishDirectory: "../../publisher-docs"

auth:
  autologout:
    enabled: true
    idleTimeoutMinutes: 10
  environment: development
  providers:
    guest:
      dangerouslyAllowOutsideDevelopment: true
      userEntityRef: user:default/guest
    microsoft:
      development:
        clientId: ${AZURE_AUTH_CLIENT_ID}
        clientSecret: ${AZURE_AUTH_CLIENT_SECRET}
        tenantId: ${AZURE_AUTH_TENANT_ID}
        domainHint: ${AZURE_AUTH_TENANT_ID}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail

#scaffolder:
# see https://backstage.io/docs/features/software-templates/configuration for software template options

search:
  pg:
    highlightOptions:
      useHighlight: true # Used to enable to disable the highlight feature. The default value is true
      maxWord: 35 # Used to set the longest headlines to output. The default value is 35.
      minWord: 15 # Used to set the shortest headlines to output. The default value is 15.
      shortWord: 3 # Words of this length or less will be dropped at the start and end of a headline, unless they are query terms. The default value of three (3) eliminates common English articles.
      highlightAll: false # If true the whole document will be used as the headline, ignoring the preceding three parameters. The default is false.
      maxFragments: 0 # Maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method. A value greater than zero selects fragment-based headline generation (see the linked documentation above for more details).
      fragmentDelimiter: ' ... ' # Delimiter string used to concatenate fragments. Defaults to " ... ".
  collators:
    catalog:
      schedule:
        frequency: PT1M
        timeout: PT15M
        initialDelay: PT5S        
    apis:
      schedule:
          frequency: PT1M
          timeout: PT15M
          initialDelay: PT5S
catalog:
  processingInterval: { minutes: 15 }
  orphanStrategy: delete
  #  import:
  #    entityFilename: catalog-info.yaml
  #    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        [
          Component,
          System,
          API,
          Resource,
          Template,
          Domain,
          Location,
          Group,
          User,
        ]
  providers:
    backstageOpenapi:
        plugins:
          - catalog
          - search
          - api
    microsoftGraphOrg:
      default:
        target: https://graph.microsoft.com/v1.0
        authority: https://login.microsoftonline.com
        tenantId: ${AZURE_GRAPH_TENANT_ID}
        clientId: ${AZURE_GRAPH_CLIENT_ID}
        clientSecret: ${AZURE_GRAPH_CLIENT_SECRET}
        queryMode: advanced
        user:
          #filter: "accountEnabled eq true and userType eq 'member'"
          select: 
          - "id"
          - "displayName"
          - "description"
          - "mail"
          - "accountEnabled"
        userGroupMember:
          filter: "startswith(displayName,'backstage')"
        group:
          select: 
          - "id"
          - "displayName"
          - "description"
        rules:
          - allow: [User, Group, Domain]
        schedule:
          frequency: { hours: 6 }
          timeout: { minutes: 5 }
          initialDelay: { seconds: 15 }

  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/catalog-info.yaml
      rules:
        - allow: 
          - Component
          - System
          - API
          - Resource
          - Template
          - Domain
          - Location
          - Group
          - User
    - type: file
      target: ../../examples/docs/techdocs/catalog-info.yaml
#    - type: file
#      target: ../../examples/docs/monorepo/catalog-info.yaml

    # Local example template      
#    - type: file
#      target: ../../examples/templates/azdo-template/template.yaml
#      rules:
#        - allow: [Template]

#    - type: file
#      target: ../../examples/templates/template/template.yaml
#      rules:
#        - allow: [Template]

    # Uncomment these lines to add more example data
    #- type: url
    #  target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml

  #   ## Uncomment these lines to add an example org
  #   # - type: url
  #   #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
  #   #   rules:
  #   #     - allow: [User, Group]

spectralLinter:
  openApiRulesetUrl: https://raw.githubusercontent.com/c4rth/playground-openapi/refs/heads/main/spectral/.spectral.yaml