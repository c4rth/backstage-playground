openapi: 3.0.1
info:
  title: Backstage Api Platform Backend
  description: OpenAPI exposed but the Backstage Api Platform Backend
  version: 0.0.1
  contact:
    name: Me
    email: me@carth.xyz
    url: https://carth.xyz

servers:
  - url: https://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: https://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

tags:
  - name: ApiPlatformBackend
    description: Operations about services

paths:
  ###############################################################################
  /api/api-platform/catalog:
    # -[POST]----------------------------------------------------------------------
    post:
      tags:
        - ApiPlatformBackend
      description: Register or refresh a Backstage catalog
      operationId: registerCatalog
      requestBody:
        description: The catalog to register or refresh
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      responses:
        "201":
          description: "Created"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "500":
          description: Unexpected error.
  ###############################################################################
  /api/api-platform/services/{serviceName}/{serviceVersion}/{containerVersion}:
    # -[POST]----------------------------------------------------------------------
    post:
      tags:
        - ApiPlatformBackend
      description: TODO
      operationId: addServiceApis
      parameters:
        - name: serviceName
          in: path
          required: true
          description: The name of the service
          schema:
            type: string
        - name: serviceVersion
          in: path
          required: true
          description: The version of the service
          schema:
            type: string
        - name: containerVersion
          in: path
          required: true
          description: The version of the container
          schema:
            type: string
      requestBody:
        description: The APIs provided and consumed by the service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Apis'
      responses:
        "201":
          description: "Created"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "500":
          description: Unexpected error.
    # -[GET]-----------------------------------------------------------------------
    get:
      tags:
        - ApiPlatformBackend
      description: TODO
      operationId: getServiceApis
      parameters:
        - name: serviceName
          in: path
          required: true
          description: The name of the service
          schema:
            type: string
        - name: serviceVersion
          in: path
          required: true
          description: The version of the service
          schema:
            type: string
        - name: containerVersion
          in: path
          required: true
          description: The version of the container
          schema:
            type: string
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apis'
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: A service with the specified name, version and container version was not found.
        "500":
          description: Unexpected error.
# -[Schemas]-------------------------------------------------------------------
components:
  schemas:
    Catalog:
      type: object
      properties:
        target:
          type: string
        kind:
          type: string
      example:
        target: https://backstage.example.com
        kind: 'API'
    Apis:
      type: object
      properties:
        consumedApis:
          type: array
          items:
            $ref: '#/components/schemas/Api'
        providedApis:
          type: array
          items:
            $ref: '#/components/schemas/Api'
      example:
        consumedApis:
          - ServiceA
          - ServiceB
        providedApis:
          - ServiceC
          - ServiceD
    Api:
      type: string
      example: "ServiceA"