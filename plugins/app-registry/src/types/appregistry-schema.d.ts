/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the API endpoints for a certain service
         * @description Get the API endpoints for a certain service
         */
        get: operations["getEndpoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/endpoints/{endpoint-id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Policies for an API endpoint
         * @description Get the Policies for an API endpoint
         */
        get: operations["getEndpointPolicies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Endpoint: {
            id?: components["schemas"]["uuid"];
            /**
             * @description Path to the endpoint
             * @example /customer-communication/document-management/contexts/{context-reference}/document-routing-requests
             */
            path: string;
            /**
             * @description Path to the endpoint (context path included)
             * @example /geso-proxy/customer-communication/document-management/contexts/{context-reference}/document-routing-requests
             */
            realPath?: string;
            method: components["schemas"]["Method"];
            /**
             * @description B-function of the endpoint
             * @example B16064
             */
            bFunction?: string;
            /**
             * @description Operation identifier
             * @example ProductManagementToolSelectedTelcoProposalCreation
             */
            operationId?: string;
            /**
             * @description Cobol operation name
             * @example PRODMANAGTOOLSELECTEDTELCOPROPCR
             */
            cobolName?: string;
            policies?: (components["schemas"]["Policy"] | components["schemas"]["ClientMtlsPolicy"])[];
        };
        AbstractPolicy: {
            type: components["schemas"]["PolicyType"];
            /**
             * @description Is the polciy active or not
             * @example true
             */
            active: boolean;
            /**
             * @description User who defined the policy
             * @example DOEJOH
             */
            userCreate?: string;
            /**
             * @description Last user who modified the policy
             * @example DOEJOH
             */
            userModif?: string;
            /**
             * Format: date-time
             * @description Last modification timestamp of the policy
             * @example 2022-02-17T17:32:28.000Z
             */
            lastUpdateTime?: string;
        };
        Policy: components["schemas"]["AbstractPolicy"] & {
            pdpMapping?: components["schemas"]["PolicyMapping"][];
            pipMapping?: components["schemas"]["PipMapping"][];
        };
        ClientMtlsPolicy: components["schemas"]["AbstractPolicy"] & {
            clientPrincipals?: components["schemas"]["Principal"][];
        };
        PolicyMapping: {
            pdpField: components["schemas"]["PdpFieldType"];
            /**
             * @description JSON path expression to the value
             * @example body.party.accountNumber
             */
            valuePath: string;
        };
        /** @enum {string} */
        PdpFieldType: "contactActorId" | "contactActorNumber" | "mainContractActorId" | "mainContractProductAgreementExternalNumber";
        PipMapping: {
            endpointDefinition: components["schemas"]["ApiEndpointDefinition"];
            requestMapping: components["schemas"]["PipRequestMapping"][];
            responseMapping: components["schemas"]["PolicyMapping"][];
        };
        Principal: {
            /**
             * @description Service account name (principal)) used by the ingress gateway
             * @example cluster.local/ns/istio-system/sa/istio-ingressgateway-mosaic-service-account
             */
            name: string;
            x500Principals: string[];
        };
        ApiEndpointDefinition: {
            /**
             * @description HTTP method to use, currently only GET is allowed
             * @enum {string}
             */
            method: "GET";
            /**
             * @description Host name on which the API endpoint is exposed
             * @example agreement-backend.gei1.svc.cluster.local
             */
            hostname: string;
            /**
             * Format: int32
             * @description Port on which the API endpoint is exposed
             * @example 80
             */
            port: number;
            /**
             * @description Path to the intended API endpoint
             * @example /api/referentials/agreement/actors/{actorId}/accounts-and-balances/accounts
             */
            path: string;
            headers?: {
                /**
                 * @description Header name
                 * @example x-api-version
                 */
                key?: string;
                /**
                 * @description Header value
                 * @example v2
                 */
                value?: string;
            }[];
            /**
             * @description Scope for which to request a JWT
             * @example api://gei1-agreement-backend-gtu-api/Default
             */
            scope: string;
        };
        PipRequestMapping: {
            /**
             * @description JSON path expression to the value
             * @example path[1]
             */
            valuePath: string;
            /**
             * @description JSON path expression to the PIP request value
             * @example path[2]
             */
            pipField?: string;
        };
        /**
         * @description Environment
         * @example GTU
         * @enum {string}
         */
        Environment: "TGT" | "TST" | "GTU" | "UAT" | "PTP" | "PRD";
        /**
         * @description API method
         * @example POST
         * @enum {string}
         */
        Method: "GET" | "POST" | "PUT" | "PATCH" | "HEAD" | "DELETE";
        /**
         * @description policy type
         * @example ACCESS_CHECK
         * @enum {string}
         */
        PolicyType: "ACCESS_CHECK" | "FUNCTIONAL_LOGGING" | "CLIENT_MTLS";
        /** @description Universally Unique Identifier, as defined in RFC 4122 and ISO/IEC 9834-8 */
        uuid: string;
        /** @description The standardized Problem JSON as defined in RFC 7807. */
        problem: {
            /**
             * Format: uri
             * @description An absolute URI that identifies the problem type.
             * @example about:blank
             */
            type: string;
            /**
             * @description A short summary of the problem type, written in English and readable for engineers.
             * @example Invalid input parameters.
             */
            title: string;
            /**
             * @description The HTTP status code of the problem / error.
             * @example 400
             */
            status: string;
            /**
             * @description A detailed description human-readable exlanation to this occurence of the problem.
             * @example Please check the detailed information and reasons of parameter invalidation.
             */
            detail?: string;
            /** @description A list of errors. */
            errors?: components["schemas"]["multiChannelErrorOrWarning"][];
        };
        /** @description The multiChannel Error or warning to fetch the correct context to be shown to the end-user. */
        multiChannelErrorOrWarning: {
            /**
             * @description The module where the error occurs.
             * @example MODULE
             */
            module: string;
            /**
             * @description The return code of the error.
             * @example 1234
             */
            returnCode: string;
            /**
             * @description The subReturnCode of the error.
             * @example 000000
             */
            subReturnCode?: string;
            /**
             * @description The severity of the error.
             *     W = Warning
             *     I = Information
             *     E = Error
             *     F = Fatal
             * @example E
             * @enum {string}
             */
            severity: "W" | "I" | "E" | "F";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getEndpoints: {
        parameters: {
            query: {
                "application-code": string;
                "service-name": string;
                "major-version": string;
                environment: components["schemas"]["Environment"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service endpoints found for the specified service version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Endpoint"][];
                };
            };
            /** @description Bad Request <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 400       | 4900          | 000000           |      E     | Constraint Violation                        | Yes           |
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Access denied <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 403       |               |                  |      E     | Access denied (RBAC)                        | No            |
             *     | 403       | <i>PDP</i>    | <i>PDP</i>       | <i>PDP</i> | Access denied (ABAC)                        | Yes           |
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                    "text/plain": string;
                };
            };
            /** @description Not acceptable, wrong request format */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Request timeout */
            408: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Unsupported media type (wrong Content-Type) */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 500       | 1300          | 000000           |      E     | Internal server error                       | Yes           |
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                };
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getEndpointPolicies: {
        parameters: {
            query: {
                environment: components["schemas"]["Environment"];
            };
            header?: never;
            path: {
                "endpoint-id": components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policies defined on a certain endpoint */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["Policy"] | components["schemas"]["ClientMtlsPolicy"])[];
                };
            };
            /** @description Bad Request <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 400       | 1200          | 000001           |      E     | Missing endpoint id                         | Yes           |
             *     | 400       | 1299          | 000000           |      E     | Unknown                                     | Yes           |
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Access denied <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 403       |               |                  |      E     | Access denied (RBAC)                        | No            |
             *     | 403       | <i>PDP</i>    | <i>PDP</i>       | <i>PDP</i> | Access denied (ABAC)                        | Yes           |
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                    "text/plain": string;
                };
            };
            /** @description Not found <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 404       | 1204          | 000001           |      E     | Endpoint not found                          | Yes           |
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                };
            };
            /** @description Not acceptable, wrong request format */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Request timeout */
            408: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Unsupported media type (wrong Content-Type) */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error <br/>
             *     | HTTP Code | Return code   | Subreturn code   | Severity   | Reason                                      | Response body |
             *     |-----------|---------------|------------------|------------|---------------------------------------------|---------------|
             *     | 500       | 1300          | 000000           |      E     | Internal server error                       | Yes           |
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["problem"];
                };
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
